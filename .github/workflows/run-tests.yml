name: Run Test Suite on Draft Release Creation, Push, and Pull Request to master

on:
  workflow_run:
    workflows: [Create Release Draft]
    types: [completed]
    branches: [master]
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  test:
    if: ${{ (github.event_name == 'workflow_run' && github.event.workflow_run.conclusion == 'success') || github.event_name == 'push' || github.event_name == 'pull_request' }}
    runs-on: ubuntu-latest

    services:
      db:
        image: postgres:12
        env:
          POSTGRES_HOST_AUTH_METHOD: trust
        ports:
          - 5432:5432
        # needed because the postgres container does not provide a healthcheck
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
      ldap:
        image: rroemhild/test-openldap
        ports:
          - 389:10389

    steps:
      - uses: actions/checkout@v2
      - name: Setup Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: '3.1'
      - uses: actions/setup-node@v3
        with:
          node-version: '16'
          cache: 'yarn'
      - name: Cache ruby gems
        uses: actions/cache@v4
        with:
          path: vendor/bundle
          key: ${{ runner.os }}-gems-${{ hashFiles('**/Gemfile.lock') }}
          restore-keys: |
            ${{ runner.os }}-gems-
      - name: Build and run tests
        env:
          DATABASE_URL: postgres://postgres:@localhost:5432/test
          RAILS_ENV: test
          # Options below this line are so we can test LDAP
          VULCAN_ENABLE_LDAP: true
          VULCAN_LDAP_ATTRIBUTE: mail
          VULCAN_LDAP_BIND_DN: cn=admin,dc=planetexpress,dc=com
          VULCAN_LDAP_BASE: ou=people,dc=planetexpress,dc=com
          VULCAN_LDAP_PORT: 389
          VULCAN_LDAP_ADMIN_PASS: GoodNewsEveryone
        run: |
          sudo apt-get -yqq install libpq-dev
          echo "gem: --no-document" > ~/.gemrc
          gem install bundler --conservative
          bundle config path vendor/bundle
          bundle install
          bundle exec rake assets:precompile
          bundle exec rails db:create db:schema:load spec
      - name: Run Rubocop
        run: bundle exec rubocop
      - name: Run eslint
        run: yarn lint:ci
      - name: Upload coverage results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: coverage-report
          path: coverage
          
  e2e:
    runs-on: ubuntu-latest
    needs: test
    
    services:
      db:
        image: postgres:12
        env:
          POSTGRES_HOST_AUTH_METHOD: trust
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    
    steps:
      - uses: actions/checkout@v2
      - name: Setup Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: '3.1'
      - uses: actions/setup-node@v3
        with:
          node-version: '16'
          cache: 'yarn'
      - name: Install Playwright
        run: |
          npx playwright install --with-deps chromium
      - name: Setup database and assets
        env:
          DATABASE_URL: postgres://postgres:@localhost:5432/test
          RAILS_ENV: test
          ADMIN_EMAIL: admin@example.com
          ADMIN_PASSWORD: 1234567ab!
          SKIP_AUTO_SERVER: true
        run: |
          sudo apt-get -yqq install libpq-dev
          gem install bundler --conservative
          bundle install
          bin/rails db:prepare
          bin/rails db:seed
          bundle exec rake assets:precompile
      - name: Run Playwright tests
        env:
          DATABASE_URL: postgres://postgres:@localhost:5432/test
          RAILS_ENV: test
          TEST_ADMIN_EMAIL: admin@example.com
          TEST_ADMIN_PASSWORD: 1234567ab!
          TEST_BASE_URL: http://localhost:3000
          SKIP_AUTO_SERVER: true
        run: |
          # Start Rails server in background
          bundle exec rails server -p 3000 -e test -d
          
          # Wait for server to be ready
          echo "Waiting for Rails server to start..."
          timeout 30 bash -c 'until curl -s http://localhost:3000 > /dev/null; do sleep 1; done'
          
          # Run Playwright tests
          npx playwright test
      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: playwright-report
          path: playwright-report/
          retention-days: 30
