require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.
#
# Also compared to earlier versions of this generator, there are no longer any
# expectations of assigns and templates rendered. These features have been
# removed from Rails core in Rails 5, but can be added back in via the
# `rails-controller-testing` gem.

RSpec.describe ProjectsController, type: :controller do

  # This should return the minimal set of attributes required to create a valid
  # Profile. As you add validations to Profile, be sure to
  # adjust the attributes here as well.
  let(:valid_attributes) {
    FactoryBot.attributes_for(:project)
  }
  
  let(:project_srg_valid_attributes) {
    FactoryBot.attributes_for(:project_srg)
  }

  let(:invalid_attributes) {
    FactoryBot.attributes_for(:invalid_project)
  }

  # This should return the minimal set of values that should be in the session
  # in order to pass any filters (e.g. authentication) defined in
  # ProfilesController. Be sure to keep this updated too.
  let(:valid_session) { {} }

  context 'User is logged in' do
    let(:vendor) { FactoryBot.create(:vendor) }
    let(:sponsor) { FactoryBot.create(:sponsor) }
    before do
      sign_in vendor
    end
    
    describe 'GET #index' do
      it 'returns a success response' do
        create :project, users: [vendor, sponsor]
        get :index, params: {}, session: valid_session
        expect(response).to be_success
      end
    end

    describe 'GET #show' do
      it 'returns a success response' do
        project = create :project, users: [vendor, sponsor]
        get :show, params: { id: project.to_param }, session: valid_session
        expect(response).to be_success
      end
    end

    describe 'GET #edit' do
      it 'returns a success response' do
        project = create :project, users: [vendor, sponsor]
        get :edit, params: { id: project.to_param }, session: valid_session
        expect(response).to be_success
      end
    end

    describe 'POST #create' do
      context 'with valid params' do
        it 'creates a new Project without srgs' do
          expect {
            post :create, params: { project: valid_attributes, users: [vendor] }, session: valid_session
          }.to change(Project, :count).by(1)
        end
        
        it 'creates a new Project with srgs' do
          project = create :project_srg, users: [vendor, sponsor]
          get :show, params: { id: project.to_param }, session: valid_session
          expect(project.srgs).to_not be_empty
        end

        it 'redirects to the created project' do
          post :create, params: { project: valid_attributes }, session: valid_session
          expect(response).to redirect_to(projects_path)
        end
      end

      context 'with invalid params' do
        it "returns a success response (i.e. to display the 'new' template)" do
          post :create, params: { project: invalid_attributes }, session: valid_session
          expect(response).to_not be_success
          expect(response).to redirect_to(projects_path)
        end
      end
    end

    describe 'PUT #update' do
      context 'with valid params' do
        let(:new_attributes) {
          FactoryBot.attributes_for(:project2)
        }

        it 'updates the requested project' do
          project = create :project, users: [vendor]
          title = project.title
          put :update, params: { id: project.to_param, project: new_attributes }, session: valid_session
          project.reload
          expect(project.title).to_not eq(title)
        end

        it 'redirects to the project' do
          project = create :project, users: [vendor]
          put :update, params: { id: project.to_param, project: valid_attributes }, session: valid_session
          expect(response).to redirect_to(project)
        end
      end

      context 'with invalid params' do
        it "returns a success response (i.e. to display the 'edit' template)" do
          project = create :project, users: [vendor]
          put :update, params: { id: project.to_param, project: invalid_attributes }, session: valid_session
          expect(response).to redirect_to(edit_project_path(project))
        end
      end
    end

    describe 'DELETE #destroy' do
      it 'destroys the requested project' do
        project = create :project, users: [vendor]
        expect {
          delete :destroy, params: { id: project.to_param }, session: valid_session
        }.to change(Project, :count).by(-1)
      end

      it 'redirects to the projects list' do
        project = create :project, users: [vendor]
        delete :destroy, params: { id: project.to_param }, session: valid_session
        expect(response).to redirect_to(projects_url)
      end
    end

  end

  context 'admin is logged in' do
    let(:admin) { FactoryBot.create(:admin) }
    before do
      sign_in admin
    end

    describe 'PUT #update' do
      context 'with valid params' do
        let(:new_attributes) {
          FactoryBot.attributes_for(:project2)
        }

        it 'updates the requested project' do
          project = create :project
          title = project.title
          put :update, params: { id: project.to_param, project: new_attributes }, session: valid_session
          project.reload
          expect(project.title).to_not eq(title)
        end

        it 'redirects to the project' do
          project = create :project
          put :update, params: { id: project.to_param, project: valid_attributes }, session: valid_session
          expect(response).to redirect_to(project)
        end
      end

      context 'with invalid params' do
        it "returns a success response (i.e. to display the 'edit' template)" do
          project = create :project
          put :update, params: { id: project.to_param, project: invalid_attributes }, session: valid_session
          expect(response).to redirect_to(edit_project_path(project))
        end
      end
    end

    describe 'DELETE #destroy' do
      it 'destroys the requested project' do
        project = create :project
        expect {
          delete :destroy, params: { id: project.to_param }, session: valid_session
        }.to change(Project, :count).by(-1)
      end

      it 'redirects to the projects list' do
        project = create :project
        delete :destroy, params: { id: project.to_param }, session: valid_session
        expect(response).to redirect_to(projects_path)
      end
    end
  end
end
